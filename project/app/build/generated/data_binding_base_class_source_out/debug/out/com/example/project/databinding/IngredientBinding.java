// Generated by view binder compiler. Do not edit!
package com.example.project.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.project.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class IngredientBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView howMany;

  @NonNull
  public final TextView ingredientName;

  @NonNull
  public final LinearLayout manyView;

  @NonNull
  public final Button minus;

  @NonNull
  public final Button plus;

  private IngredientBinding(@NonNull LinearLayout rootView, @NonNull TextView howMany,
      @NonNull TextView ingredientName, @NonNull LinearLayout manyView, @NonNull Button minus,
      @NonNull Button plus) {
    this.rootView = rootView;
    this.howMany = howMany;
    this.ingredientName = ingredientName;
    this.manyView = manyView;
    this.minus = minus;
    this.plus = plus;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static IngredientBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static IngredientBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.ingredient, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static IngredientBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.how_many;
      TextView howMany = ViewBindings.findChildViewById(rootView, id);
      if (howMany == null) {
        break missingId;
      }

      id = R.id.ingredientName;
      TextView ingredientName = ViewBindings.findChildViewById(rootView, id);
      if (ingredientName == null) {
        break missingId;
      }

      id = R.id.many_view;
      LinearLayout manyView = ViewBindings.findChildViewById(rootView, id);
      if (manyView == null) {
        break missingId;
      }

      id = R.id.minus;
      Button minus = ViewBindings.findChildViewById(rootView, id);
      if (minus == null) {
        break missingId;
      }

      id = R.id.plus;
      Button plus = ViewBindings.findChildViewById(rootView, id);
      if (plus == null) {
        break missingId;
      }

      return new IngredientBinding((LinearLayout) rootView, howMany, ingredientName, manyView,
          minus, plus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
